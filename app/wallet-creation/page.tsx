"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Checkbox } from "@/components/ui/checkbox";
import { KeyRound, Copy, ShieldCheck } from "lucide-react";

// DUMMY DATA: In a real app, this would be generated by a crypto library.
const recoveryPhrase = [
  "apple",
  "river",
  "journey",
  "mountain",
  "ocean",
  "breeze",
  "sunshine",
  "forest",
  "whisper",
  "meadow",
  "crystal",
  "serene",
];

export default function SsiWalletCreationPage() {
  const [currentStep, setCurrentStep] = useState(0);
  const [hasBackedUp, setHasBackedUp] = useState(false);
  const [copied, setCopied] = useState(false);

  const steps = ["Learn", "Secure", "Finish"];

  const handleCopyToClipboard = () => {
    navigator.clipboard.writeText(recoveryPhrase.join(" "));
    setCopied(true);
    setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds
  };

  const handleNext = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1);
    } else {
      // TODO: On finish, navigate to the next screen (Profile & Document Upload)
      // router.push('/document-upload');
      console.log("Wallet creation complete!");
    }
  };

  const handleBack = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  // A small component for the stepper UI
  const Stepper = () => (
    <div className="flex justify-between items-center w-full max-w-sm mx-auto mb-4">
      {steps.map((step, index) => (
        <div key={step} className="flex flex-col items-center flex-1">
          <div
            className={`w-8 h-8 rounded-full flex items-center justify-center border-2 transition-all duration-300 ${
              currentStep >= index
                ? "bg-viridian-green border-viridian-green text-white"
                : "border-slate-300"
            }`}
          >
            {index + 1}
          </div>
          <p
            className={`mt-2 text-xs transition-all duration-300 ${
              currentStep >= index
                ? "text-viridian-green font-semibold"
                : "text-slate-500"
            }`}
          >
            {step}
          </p>
        </div>
      ))}
    </div>
  );

  return (
    <main className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
      <Card className="w-full max-w-2xl">
        <CardHeader>
          <Stepper />
          <CardTitle className="text-2xl md:text-3xl text-dark-jungle-green text-center pt-6">
            {currentStep === 0 && "Your Secure Digital Wallet"}
            {currentStep === 1 && "Save Your Recovery Phrase"}
            {currentStep === 2 && "Setup Complete!"}
          </CardTitle>
        </CardHeader>

        <CardContent className="min-h-[300px] flex items-center">
          {/* Step 1: Learn */}
          {currentStep === 0 && (
            <div className="grid grid-cols-1 md:grid-cols-2 gap-8 text-slate-600">
              <div className="text-center">
                <ShieldCheck className="mx-auto h-12 w-12 text-viridian-green mb-4" />
                <h3 className="font-semibold text-lg text-dark-jungle-green">
                  A Digital Vault
                </h3>
                <p>
                  Your wallet securely stores your verified documents, like your
                  passport and certificates.
                </p>
              </div>
              <div className="text-center">
                <KeyRound className="mx-auto h-12 w-12 text-viridian-green mb-4" />
                <h3 className="font-semibold text-lg text-dark-jungle-green">
                  You Are In Control
                </h3>
                <p>
                  Only you can access your wallet and decide who to share your
                  information with. Not even SafePass can see your data.
                </p>
              </div>
            </div>
          )}
          {/* Step 2: Secure */}
          {currentStep === 1 && (
            <div className="w-full">
              <p className="text-center text-red-600 font-semibold mb-4">
                This is the ONLY way to recover your wallet. Write these 12
                words down and store them in a very safe place.
              </p>
              <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 p-4 border rounded-md bg-slate-50">
                {recoveryPhrase.map((word, index) => (
                  <span key={index} className="text-slate-700 font-mono">
                    <strong className="text-dark-jungle-green pr-2">
                      {index + 1}.
                    </strong>
                    {word}
                  </span>
                ))}
              </div>
              <div className="flex items-center justify-between mt-4">
                <Button variant="ghost" onClick={handleCopyToClipboard}>
                  <Copy className="mr-2 h-4 w-4" />
                  {copied ? "Copied!" : "Copy to Clipboard"}
                </Button>
                <div className="flex items-center space-x-2">
                  <Checkbox
                    id="backup-confirm"
                    checked={hasBackedUp}
                    onCheckedChange={(checked) =>
                      setHasBackedUp(checked as boolean)
                    }
                  />
                  <label
                    htmlFor="backup-confirm"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                  >
                    I have saved my phrase
                  </label>
                </div>
              </div>
            </div>
          )}
          {/* Step 3: Finish */}
          {currentStep === 2 && (
            <div className="w-full space-y-4 text-center text-slate-600">
              <ShieldCheck className="mx-auto h-16 w-16 text-viridian-green" />
              <p className="text-xl font-semibold text-dark-jungle-green">
                Your Wallet is Secure!
              </p>
              <p>
                Your digital identity is now ready. The next step is to upload
                your documents to be verified and added to your wallet.
              </p>
            </div>
          )}
        </CardContent>

        <CardFooter className="flex justify-between border-t pt-6">
          <Button
            variant="outline"
            onClick={handleBack}
            disabled={currentStep === 0}
          >
            Back
          </Button>
          <Button
            onClick={handleNext}
            className="bg-viridian-green hover:bg-sage-green"
            disabled={currentStep === 1 && !hasBackedUp}
          >
            {currentStep === steps.length - 1
              ? "Finish & Continue"
              : "Continue"}
          </Button>
        </CardFooter>
      </Card>
    </main>
  );
}
